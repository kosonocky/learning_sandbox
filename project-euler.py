
from decimal import DivisionByZero
from re import L
import math
import numpy as np


def problem_1(limit):
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """

    total = 0
    for i in range(limit):
        if (i % 3 == 0) | (i % 5 == 0):
            total += i
    return total


def problem_2(limit):
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    total = 0
    prev = 1
    current = 1
    while current <= limit:
        if current % 2 == 0:
            total += current
        current += prev
        prev = current - prev

    return total


def problem_3(number):
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    """
    factored = False
    largest_prime = 0
    while factored is False:
        loop_completed = True
        for i in range(2, int(np.sqrt(number)+1)):
            # Check if i is prime
            i_is_prime = True
            for j in range(2, int(np.sqrt(i)+1)):
                if i % j == 0:
                    i_is_prime = False
                    break

            if i_is_prime is True:
                if number % i == 0:
                    if i > largest_prime:
                        largest_prime = i
                    print(f'{number} is disivisble by {i}')
                    number = int(number / i)
                    loop_completed = False
                    break
        if loop_completed is True:
            if number > largest_prime:
                largest_prime = number
            factored = True
    return largest_prime


def problem_4():
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    def palindromic(number):
        string_number = str(number)
        palindromic = True
        for i in range(0, len(string_number)//2):
            if string_number[i] != string_number[-(i+1)]:
                palindromic = False
                break
        return palindromic

    largest_palindrome = 0
    for i in range(999, 1, -1):
        for j in range(999, 1, -1):
            if (palindromic(i*j) is True) and (i*j > largest_palindrome):
                largest_palindrome = i*j
    return largest_palindrome


def problem_5_method_1(upper_bound):
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    """
    number = upper_bound
    divisible = False
    while divisible is False:
        divisible = True
        number += 1
        for i in range(1, upper_bound + 1):
            if number % i != 0:
                divisible = False
                break
    return number


def problem_5_method_2(upper_bound):
    number = 1
    for i in range(1, upper_bound + 1):
        number *= i // math.gcd(i, number)
    return number


def problem_6(limit):
    sum_1 = 0
    sum_2 = 0
    for i in range(1, limit+1):
        sum_1 += i**2
        sum_2 += i
    answer = abs(sum_1 - (sum_2**2))
    return answer


def problem_7(limit):
    def is_prime(number):
        for i in range(2, int(np.sqrt(number))+1):
            if number % i == 0:
                return False
        return True

    primes_found = 0
    i = 0
    while primes_found <= limit:
        i += 1
        if is_prime(i) is True:
            primes_found += 1
    return i


def main():
    # print(problem_1(1000))
    # print(problem_2(4000000))
    # print(f'Largest prime factor is {problem_3(33)}')
    # print(palindromic(4554))
    # print(problem_4())
    # print(problem_5_method_2(20))
    print(problem_7(10001))
    pass


if __name__ == '__main__':
    main()
